/*
  AZ OLED Display
  Blink the blue LED on the ESP-01 module
  This example code is in the public domain

  This example is for a 128x32 pixel display using I2C to communicate
  3 pins are required to interface (two I2C and one reset).

  I2C Adress : 0x3c
*/
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels
// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define LOGO_HEIGHT   16
#define LOGO_WIDTH    16
const uint8_t ECODECAT [] PROGMEM = {
   0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xd0, 0x00, 0x00, 0xd8, 0x01, 0x00,
   0xb8, 0x03, 0x00, 0xb8, 0x07, 0x00, 0xbc, 0x0f, 0x00, 0xbc, 0x1f, 0x00,
   0xbc, 0x1f, 0x00, 0x7e, 0x3f, 0x00, 0x7e, 0x3f, 0x38, 0x7e, 0x3f, 0x5e,
   0x7e, 0x3f, 0x6f, 0x7e, 0xbf, 0x77, 0xfe, 0xde, 0x7b, 0xfc, 0xee, 0x7d,
   0xfc, 0xf6, 0x7d, 0xf8, 0xf6, 0x3e, 0xf0, 0x7a, 0x3f, 0xe0, 0xbd, 0x1f,
   0xc0, 0xdd, 0x1f, 0x80, 0xed, 0x0f, 0x00, 0xed, 0x07, 0x00, 0xf4, 0x01 };

const unsigned char TEMP1 [] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0x00, 0x00,
   0x00, 0xe0, 0x7a, 0x00,
   
   0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0xfc, 0x30,
   0xc0, 0x00, 0x00, 0xfc, 0x19, 0x80, 0x01, 0x00, 0x00, 0x18, 0x82, 0x01,
   0x00, 0x00, 0x18, 0x86, 0x01, 0x00, 0x00, 0x18, 0x86, 0x01, 0x00, 0x00,
   0x18, 0x86, 0x01, 0x00, 0xf0, 0x19, 0x86, 0x01, 0x00, 0xf8, 0x19, 0x86,
   0x01, 0x00, 0x00, 0x18, 0x86, 0x01, 0x00, 0x00, 0x18, 0x86, 0x01, 0x00,
   0x00, 0x18, 0x86, 0x01, 0x00, 0x00, 0x18, 0x86, 0x01, 0x00, 0xfc, 0x19,
   0x86, 0x01, 0x00, 0xfc, 0x19, 0x86, 0x01, 0x00, 0x00, 0x18, 0x86, 0x01,
   0x00, 0x00, 0x18, 0x86, 0x01, 0x00, 0x00, 0x18, 0x86, 0x01, 0x00, 0x00,
   0x18, 0x86, 0x01, 0x00, 0xf8, 0x19, 0x86, 0x01, 0x00, 0xf0, 0x19, 0x86,
   0x01, 0x00, 0x00, 0x18, 0x86, 0x01, 0x00, 0x00, 0x18, 0x86, 0x01, 0x00,
   0x00, 0x18, 0x86, 0x01, 0x00, 0x20, 0x18, 0x86, 0x01, 0x00, 0xfe, 0x19,
   0x86, 0x01, 0x00, 0x6c, 0x19, 0x86, 0x01, 0x00, 0x00, 0x18, 0x86, 0x01,
   0x00, 0x00, 0x18, 0x86, 0x01, 0x00, 0x00, 0x1c, 0x86, 0x03, 0x00, 0x00,
   0x0e, 0x06, 0x07, 0x00, 0x00, 0x07, 0x06, 0x06, 0x00, 0x00, 0x83, 0x1f,
   0x0c, 0x00, 0x00, 0xc3, 0x3f, 0x0c, 0x00, 0x80, 0xc1, 0x3f, 0x1c, 0x00,
   0x80, 0xe1, 0x7f, 0x18, 0x00, 0x80, 0xe1, 0x7f, 0x18, 0x00, 0x80, 0xe1,
   0x7f, 0x18, 0x00, 0x80, 0xe1, 0x3f, 0x08, 0x00, 0x00, 0xc3, 0x3f, 0x0c,
   0x00, 0x00, 0x83, 0x1f, 0x0c, 0x00, 0x00, 0x07, 0x02, 0x06, 0x00, 0x00,
   0x06, 0x00, 0x07, 0x00, 0x00, 0x1c, 0x80, 0x03, 0x00, 0x00, 0x38, 0xc0,
   0x01, 0x00, 0x00, 0xf0, 0xfb, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

const unsigned char TEMP2 [] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0x00, 0x00,
   0x00, 0xe0, 0x74, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0xfc, 0x30,
   0xc0, 0x00, 0x01, 0xfc, 0x19, 0x80, 0x81, 0x03, 0x00, 0x18, 0x82, 0xc1,
   0x07, 0x00, 0x18, 0x86, 0xe1, 0x0f, 0x00, 0x18, 0x86, 0x71, 0x1b, 0x00,
   0x18, 0x86, 0x39, 0x3b, 0xf0, 0x19, 0x86, 0x8d, 0x31, 0xf8, 0x19, 0x86,
   0x01, 0x01, 0x00, 0x18, 0x86, 0x81, 0x03, 0x00, 0x18, 0x86, 0x01, 0x01,
   0x00, 0x18, 0x86, 0x81, 0x03, 0x00, 0x18, 0x86, 0x01, 0x01, 0xfc, 0x19,
   0x86, 0x81, 0x03, 0xfc, 0x19, 0x86, 0x01, 0x01, 0x00, 0x18, 0x86, 0x81,
   0x03, 0x00, 0x18, 0x86, 0x01, 0x01, 0x00, 0x18, 0x86, 0x81, 0x03, 0x00,
   0x18, 0x86, 0x01, 0x01, 0xf8, 0x19, 0x86, 0x81, 0x03, 0xf0, 0x19, 0x86,
   0x01, 0x01, 0x00, 0x18, 0x86, 0x81, 0x03, 0x00, 0x18, 0x86, 0x01, 0x01,
   0x00, 0x18, 0x86, 0x81, 0x03, 0x10, 0x18, 0x86, 0x01, 0x01, 0xfe, 0x19,
   0x86, 0x01, 0x03, 0x6c, 0x19, 0x86, 0x01, 0x00, 0x00, 0x18, 0x86, 0x01,
   0x00, 0x00, 0x18, 0x86, 0x01, 0x00, 0x00, 0x1c, 0x86, 0x03, 0x00, 0x00,
   0x06, 0x06, 0x07, 0x00, 0x00, 0x06, 0x06, 0x06, 0x00, 0x00, 0x83, 0x0f,
   0x0c, 0x00, 0x00, 0xc3, 0x3f, 0x0c, 0x00, 0x80, 0xc1, 0x3f, 0x0c, 0x00,
   0x80, 0xe1, 0x7f, 0x18, 0x00, 0x80, 0xe1, 0x7f, 0x18, 0x00, 0x80, 0xe1,
   0x7f, 0x18, 0x00, 0x80, 0xe1, 0x3f, 0x08, 0x00, 0x00, 0xc3, 0x3f, 0x0c,
   0x00, 0x00, 0x83, 0x1f, 0x0c, 0x00, 0x00, 0x07, 0x02, 0x0e, 0x00, 0x00,
   0x06, 0x00, 0x06, 0x00, 0x00, 0x1c, 0x80, 0x03, 0x00, 0x00, 0x38, 0xc0,
   0x01, 0x00, 0x00, 0xf0, 0xfb, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

void initOled() {

  //u8g2.begin();
  //u8g2.setDisplayRotation (U8G2_R2);
  //Serial.begin(115200);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.display();
  delay(2000); // Pause for 2 seconds

  // Clear the buffer
  display.clearDisplay();
  // Affichage du logo
  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    ECODECAT,
    LOGO_WIDTH, LOGO_HEIGHT, 
    1);
  display.display();
  delay(2000);  // Pause 2 secondes
}

void displayOled() {

  
/*  u8g2.firstPage();
//  do {
//    if (conta1 < 2){
      u8g2.setFont(u8g2_font_spleen16x32_mu);
      u8g2.setCursor(0,55);
      u8g2.println("ECODECAT");
      u8g2.drawXBMP(27, 5, 24, 24, ECODECAT);
      delay(2000);
//      conta1 = conta1 + 1;
/*    }
    else{
      if (TEMPERATURAPANTALLA >= 100) {
        u8g2.setCursor(50,30);
      }
      else{
        if(TEMPERATURAPANTALLA < 10){
          u8g2.setCursor(86,30);
        }
        else{
          u8g2.setCursor(68,30);
        }
      }
      if (TEMPERATURA < 240){
        u8g2.setFont(u8g2_font_spleen16x32_mu);
        u8g2.println(int(TEMPERATURAPANTALLA));
      }
      else{
        u8g2.setCursor(50,30);
        u8g2.setFont(u8g2_font_spleen16x32_mu);
        u8g2.println("MAX!");
      }
      u8g2.setFont(u8g2_font_tinytim_tf);
      u8g2.setCursor(105,15);
      u8g2.println("O");
      u8g2.setFont(u8g2_font_spleen16x32_mu);
      u8g2.setCursor(112,30);
      u8g2.println("C");

      u8g2.setCursor(50,60);
      u8g2.setFont(u8g2_font_spleen16x32_mu);
      u8g2.println(int(Setpoint));
      u8g2.setFont(u8g2_font_tinytim_tf);
      u8g2.setCursor(105,45);
      u8g2.println("O");
      u8g2.setFont(u8g2_font_spleen16x32_mu);
      u8g2.setCursor(112,60);
      u8g2.println("C");

      
      if (ESTAT == 1){
        if (conta2 < 30){
          u8g2.drawXBMP(5, -5, 40, 64, TEMP1);
          conta2 = conta2 + 1;
        }
        else{
          u8g2.drawXBMP(5, -5, 40, 64, TEMP2);
          conta2 = conta2 + 1;
          if (conta2 == 70){
            conta2 = 0;
          }
        }
      }
    } 
  } while ( u8g2.nextPage() );*/

}